name: SonarCloud

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
  
on:
  push:
    branches:
      - main 
    paths-ignore:
      - "doc/**"
      - "boards/**"
      - "*.md"
      - "*.txt"
      - "*.json"
      - "*.yml"
      - "*.yaml"
  pull_request:
    paths:
      - '**/*.c'
      - '**/*.h'
      - west.yml
      - '**/CMakelists.txt'
      - '**/Kconfig*'
      - '**/prj.conf'

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    container: ghcr.io/zephyrproject-rtos/ci:v0.27.4
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory
      CMAKE_PREFIX_PATH: /opt/toolchains
    steps:
      - uses: actions/checkout@v4
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          path: pslabel-oob

      - uses: actions/checkout@v4
        if: github.event_name != 'pull_request'
        with:
          fetch-depth: 0
          path: pslabel-oob

      - name: Initialize
        working-directory: pslabel-oob
        run: |
            west init -l .
            west config manifest.group-filter +bsec
            west config build.sysbuild True
            west update -o=--depth=1 -n
            west blobs fetch hal_nordic

      - name: Install dependencies
        run: |
            pip install -r nrf/scripts/requirements-build.txt
            pip install gcovr
            apt-get update
            apt install -y curl ruby-full

      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v3

      - name: Build and test
        working-directory: pslabel-oob
        run: |
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} west build app -b native_sim -- -DCONFIG_COVERAGE=y

      - name: Extract coverage into sonarqube xml format
        working-directory: pslabel-oob
        run: |
          if [ -d "build" ]; then
            gcovr build -v --merge-mode-functions=separate --exclude='build|drivers' --sonarqube coverage.xml
          else
            echo "Build directory not found, creating empty coverage file"
            echo '<?xml version="1.0" encoding="UTF-8"?><coverage version="1"></coverage>' > coverage.xml
          fi

      - name: Debug build-wrapper output
        working-directory: pslabel-oob
        run: |
          echo "Build wrapper output directory contents:"
          ls -la ${{ env.BUILD_WRAPPER_OUT_DIR }}/
          echo "Checking for compile_commands.json:"
          if [ -f "${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json" ]; then
            echo "✅ compile_commands.json found"
            wc -l ${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json
          else
            echo "❌ compile_commands.json not found"
          fi

      - name: Run sonar-scanner for branch
        working-directory: pslabel-oob
        if: github.event_name != 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json" \
            --define project.settings=sonar-project.properties \
            --define sonar.coverageReportPaths=coverage.xml \
            --define sonar.inclusions=**/*.c,**/*.h \
            --define sonar.exclusions=build/**,modules/**,bootloader/**,doc/**,boards/**,west.yml,*.md,*.txt,*.json,*.yml,*.yaml \
            --define sonar.branch.name=${{ github.ref_name }}

      - name: Run sonar-scanner for PR
        working-directory: pslabel-oob
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_BRANCH: ${{ github.event.pull_request.head.ref }}
          BASE_REF: ${{ github.event.pull_request.base.ref }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          sonar-scanner \
            --define sonar.cfamily.compile-commands="${{ env.BUILD_WRAPPER_OUT_DIR }}/compile_commands.json" \
            --define project.settings=sonar-project.properties \
            --define sonar.coverageReportPaths=coverage.xml \
            --define sonar.inclusions=**/*.c,**/*.h \
            --define sonar.exclusions=build/**,modules/**,bootloader/**,doc/**,boards/**,west.yml,*.md,*.txt,*.json,*.yml,*.yaml \
            --define sonar.scm.revision=${{ env.HEAD_SHA }} \
            --define sonar.pullrequest.key=${{ env.PR_NUMBER }} \
            --define sonar.pullrequest.branch=${{ env.PR_BRANCH }} \
            --define sonar.pullrequest.base=${{ env.BASE_REF }}